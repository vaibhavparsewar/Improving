

//BIT -MANIPULATION-----------------------------------------------------
-AND:  
Q.1. Find if the given no.is Odd

-OR:

-EXOR:(if and only if): a^1 = a' and a^0 = a
-only 0 1 is 1 and 1 0 is 1 else 0

-COMPLEMENT: a =1011  a' =0100

//NUMBER SYSTEMS-----------------------------------------------------
1. Decimal: 0to9 then 11,12,13,14,15,16
2. Binary: 0to1
3. Octal: 0to7 then 10,11,12,13,14,15,16,17,18  i.e., Decimal(9) = Octal(11)
4. Hex: 0to9 then AtoF


//CONVERSION-----------------------------------------------------
1. Decimal to base b 
Ans- divide by b until 0

2.Binary to Decimal
Ans- (11)2 =  1*2^1+1*2^0 = (3)10

3.Binary to Octal 
Ans- Binary>decimal>octal

//LEFT SHIFT (<<)-----------------------------------------------------
1. 10<<1 
Ans- 10 to be left shifted by 1 
    convert 10 to binary 1010 now shift left each digit and add 0 to right
    10100  binary to decimal = 20

OR a<<b = a*2^b

//RIGHT SHIFT (<<)-----------------------------------------------------
1. 0011001 >> 1
Ans- ignore rightest 1 
        001100 = 11234

OR a>>b = a/2^b

//QUESTIONS-----------------------------------------------------
1.ODD or EVEN
    -Explanation: 10101 when converting to decimal we do 2^0 then 2^1 then 2^2
     So [1010] this will be always even as they are going to be multiplied by 2^ some power 
     But rightes 1 is multiplied with 2^0 
     so last digit will determine whether it is even or odd if last is 1 then odd if 0 then even

        e.g.n=100101 
            n&1 == 1 then odd
            100101
        &   000001
        -------
        0000001   as one means last digit is 1 means odd right as it will be multiplied with 2^0 then 1

    private static boolean idOdd(int n){
        reutrn (n & 1) ==1;
    }


2.IN ARRAY EVERY NO. APPEAR TWICE AND FIND NO.APPEARING ONLY ONES 
        = sort and then find 
        OR 
        = 1 exor 1 = 0  and 0 exor 0 = 0 
        so completely exor array and matching will be 0 right 

    int unique = 0;
    for(int n: arr){
     游놓 unique = unique ^ n;
    }


3.ARRAY HAS POSITIVE AND NEGATIVE NO'S BUT ONE DOES NOT HAVE IT'S PAIR FIND
= ADD ALL THE NO'S


4.FIND ith BIT OF A NO.
    = 10110110 find 5th from right = 1
    AND with 00010000 put 5th place 1 and other 0 and create this no
    but how to get this use left shift 1<<4 means it will be on 5th 

  游놓return n & (1<<(n-1));


5. SET THE ith BIT 
= means if ith bit is 0 then set to 1
    OR the ith bit with 1 

    游놓return n|(1<<(n-1));    //(1<<(n-1)) will give us  all 0's and ith position 1


5. RESET THE ith BIT 
= means if ith bit 1 to 0 ani bakiche tashech pahije
    & the ith bit with 0 and to get 0 at ith make 1 at ith and then do complement
            1010110
        &   1101111
            -------
            1000110
    游놓return n|(1<<(n-1));    //(1<<(n-1)) complement will give us  all 1's and ith position 0


6.FIND THE POSITION OF RIGHT MOST SET BIT.
= means 10110110 from right 1 digit is at 2
    negative of a number in binary form:
        1 byte = 8 bits 
        10 in binary = 00001010      --LSB =left most 0 and RSB= right most bit 
        -10 in binary = 10001010    --LSB if 0 then ositive else negative
        to get this 1.Complement the no. 2.Add 1 to it whihc is 2's complement
        10 = 00001010
        1.complement = 11110101
        2.Add 1 to it= 11110110    = -10

//complement of a number n = (0-n) = -n

//RANGE OF NUMBERS ----------------------------------------------------------------
1 byte = 8 bits 
one bit lsb for negative or positive so total 7 bits 
-2^7=128 to +2^7=127
    ==why decreasing one number from +ve side and made 127 as -ve0 = 0
    --128 to +128 = 257

-2^(n-1) to +2(n-1)-1


7. IN THAT QUESTION WHERE TO FIND THE NUMBER WHICH IS NOT REPETING WE USED EXOR BUT WHAT IF THE DUPLICATE NUMBERS WERE APPEARING ODD times
= [2,2,3,2,7,7,8,7,8,8] we need to find 3

8.FINDT THE NTH MAGIC NO.   
- means 
1 = 01 = 0*5^2+5^1*1  = 5
2 = 10 = 1*5^2 + 0*5^1 = 30   like this
ANS = suppose n =6 means 110 and doing & with 1 gives last digit 
      and next time we need only 11 so right shift 110>>1 so will get 11
      this way you can get last digit and multiply by 5^x

      int ans = 0;
      int x =1;
      while(n>0){
       游놓 int last = n&1;
        ans = ans + last*Math.pow(5,x)
        x++;

        //decrement no. by right shift 
        游놓n = n>>1;
      }


8.FIND NO.OF DIGITS IN BASE b
- means 
    (6) in binary = 110 = no.of digits = 3
    游놓to count the digits you can do right shift till no. greater than 0
    OR formula 
    log10 base 2 = 3.32
    10 = 2^3.32
    =no of digits in base b of no.n = int(logn base b)+1

int n = 34567;
int b = 10;
int ans = (int)(Math.log(n) / Math.log(b))+1

9. PASCAL'S TRIANGLE FIND THE SUM OF NTH ROW 
=   sum of each row = nc0+nc1+nc2+nc3+....ncn = 2^n
    for nth row = 2^(n-1)

    ANS = 1<<(n-1)


10. YOU ARE GIVEN A NUMBER FIND OUT IF IT'S POWER OF 2 OR NOT 
ANS - 游놓left shift kr jo parant 1 nahi bhetat ani mg count ++ kar that count will be power value
OR
- e.g. 10000000 = can be written as = 1111111+1
-do n & (n-1) IF IT'S 0 then power
    10000000
   &01111111
   ---------
游놓
   if(n&(n-1) = 0){
    reutrn true;
   }
   else{
    return false;
   }


11. CALCULATE a^b
- 3^6 = 6 can be written as 110
    3^110 = 3^(2^2)*3^(2^1)*3^(2^0) = 3^4*3^2*3^0 = 729     //but we are doubling base

int base = 3;
int power = 6;
 
 int ans = 1;

 while(power > 0){
    if((power & 1)==1 ){   //last digit is 1 or 0 checking if 0 then leave it as it will be 0 only

        ans = ans * base;
    }    

    base*=base;         //doubling base
    power = power>>1;

 }
 sout(ans)



 12. FIND THE NUMBER OF SET BITS
 - n = 9
   n = 1001   so answer is 2 

ANS - do right shift until no. is 0 and then count++ when you find 1

        n&(n-1) will give right most set bit so do count++
        now subtract this right most set bit from original 
        n&(n-1)     //keep doing this thing until n>0 means deleting 1 by 1


static int setBits(int n ){
    int count = 0;

    while(n >0){
        count ++;
        n = n & (n-1);
    }

    return count;

}


13.FINX XOR OF NO.S FROM 0 TO a 
a       xor from 0toa
0       0
1       0^1 = 1
2       0^1^2 = 3
3       0
4       4
5       1
6       7 
7       0 
8       8
9       1

after every 4 no.'s the pattern is repeting 
if a%4 = 0 then ans is a 
if a%4 = 1 then ans is 1 
if a%4 = 2 then ans is a+1 
if a%4 = 3 then ans is 0 



14. EXOR OF ALL NO.S BETWEEN a&b
means if a= 3 and b = 9 
we already know 0 to 9
find 2^4^5^6^7^8^9

ANS find till 0to9 and 0to2 then - it

so we do again exor to remove 0to2 
ans  = f(0 to b) ^ f(0 to b-1)


static in xor(int a){
    if(a%4 == 0){
        return a;
    }
    if(a%4 == 1){
        return 1;
    }
    if(a%4 == 2){
        return a+1;
    }
    if(a%4 == 3){
        return 0;
    }
}

int ans = xor(b) ^ xor(a-1)


15. LEETCODE 832 FLIPPING IMAGE HORIZONTALLY AND TEHN INVERT IT 

--n Exor with 1 will give inverse of that number 
1 1 0
1 0 1
0 0 0   
reverse  
0 1 1
1 0 1
0 0 0 
invert/ flipped
1 0 0
0 1 0
1 1 1

1. for each row reverse the array 
2. perform exor wiht 1 you will get opposite

public int[][] flipAndInverImage(int[][] image){
    for(int[] row : image){
        //reverse 
        for(int i = 0; i < (image[0].length+1)/2 ;i++){
            int temp = row[i] ^ 1;      //doing exor at this time only 
            row[i] = row[image[0].length-1-i] ^ 1;
            row[image[0].length-i-1] = temp;
        }
    }
    return image;

}
