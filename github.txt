github=>code hosting service allows to host the repos
git=>version control system maintaining history of the project

Distributed vcs when client pulls he gets all history so backup is with all the client

staging area => files which we want to commit next


bash commands
pwd = present working directory
ls							//list all files
ls -a 									//also shows hidden files
cd foldername= change direcotry					cd /c or cd desktop
mkdir foldername		//makes the folder
touch filename.filetype	//creates the file
cat filename.filetype		//gives the file content


.git folder stores the history of project

already git file asel tr don't do git init
git status ni check kr t already aahe ka .git madhe files


Commands 
git config --global user.username "vaibhav" 	//to check git config user.name
git config --global user.email vaibhav.parsewar2000@gmial.com
git config --list                           //shows all configured data
git status
git init   									//\apke folder ko git repository bana diya he
git add --a or git add .	//sare files ko staging area me daldo  before this status will be untracked but now after this status will be "changes to be comitted"
git restore --staged names.txt 	//to remove file from stage

git commit -m "initial commit"

git diff 								// working directory and staging che file compare karto
git diff --stage 						// staging area and comitted files compare karto
rm -rf .git 							//removes git file from folder
git clone urlhere namehereyouwanttogive			//to clone repository
git reset urlhereFromgitLog			//this commit will get deleted
git stash 		//putting everything backstage so we can create new code base


untracked-> unmodified(apan git add --a kela direct staged nahi hot)-> modified(files modified kela ata apan git add --a karal) -> staged


GIT IGNORE
1)touch .gitignore			//creates .gitignore file
2)ata .gitignore open kr ani j file or folders tula imp nahi jasa .log files tyach naav lihi kivva multiple .log astil tr *.log lihi .gitignore madhe (folder asel tr foldername/ lihi) ani save kr
3)ata git status kela tr ji unimp file hoti t dakhvat nahi


SKIP STAGING AREA
git commit -a -m "Direct commit" 		//TRACked files(already in stage) ko commit karega


DELETING AND RENAMING THE FILE
git rm filename.txt			// This will remove and automatically stage(means apan j git add . karto t automatic hota ) the file ani just commit kr
rm -rf filename.filetype
git mv filename.txt new_name.txt 						// This will rename and automatically stage(means apan j git add . karto t automatic hota ) the file ani just commit kr

git rm --cashed filename.filetype 						// .gitignore madhe j file ch nav aahe tyla tula manually untrack karav ch lagal





git log 							//to see history's of the commit
git log -p  -1									// get's you history with what changes been made -1 means only one persons commit disal
git log --stat									//short summary of the commit history
git log --pretty= one line							//preetified in one line whole git commits
git log --preety= short
git log --since= 2.days
git log --preety=format:"%h --%an --%ae"					//an means author name


///!COMMIT HAS ITS OWN ID
COPY THE COMMIT ID AND RUN THIS CODE SO AFTER THAT ID ALL COMMITS WILL BE DELETED
git reset PasteTheCommitId


JR TULA LOKANNI COMMIT KELELA MADHE CHANGES KARAYCH ASAL TR kivva swatach commit change karaych asel tr	
git commit --amend                                            			// mg ek editor yeil tyat i type kar mhnje tula lihita yeil lihila ki esc dab mag :wq lihi ani enter




UNSTAGE 
git restore --stage filename.txt




UnMODIFY
git checkout -- filename.filetype            					//ctrl+z sarkh pn khup files astil tr    git checkout -f


git restore filename.filetype								//discard all changes


INSTED OF BRANCH MASTER USE BRANCH MAIN
git branch -M *- main  
git push origin main



REMOTE WORKING
1) create repository 
2) create shh link
git remote add origin url(github repo banavla ki asta tithch)  `		//get this when creating repo   and origin means url ka naam he
git remote -v 									//to know konti repo aahe ka
							//you will not have permission so go to setting -> ssh & gpg keys -> new ssh -> search on google ssh key github ani tyatle command run kr  1)$ ssh-keygen -t ed25519 -C "vaibhav.parsewar2000@gmail.com"
							2)$ eval $(ssh-agent -s)  3)$ ssh-add ~/.ssh/id_rsa 4)$ tail ~/.ssh/id_ed25519.pub        this way you will get ssh key now copy that i.e(ssh-ed25519AAAAC3NzaC1lZDI1NTE5AAAAIIWOQO1Kn0xoek8tJ5DZ5brHQEN4VE8aVs4EbnEHNRg1 vaibhav.parsewar2000@gmail.com
							) and paste into github website

git push -u origin master


ata j kahi edit karshil tyala add . kr mg commit kr mg push kr




ALIAS
git config --global alias.st status					//mhane status la apan st lihu shakto ata





BRANCHING -always create new branch when working on new feature
//!never commit on main branch
git branch feature and do git checkout feature 	//head points to new branch
git checkout -b develop1					//now you are into new branch develop
git branch -d develop						//deleting branach   use -D if you dont want errors
git push -d origin bugfix					//deleting branch bugfix on remote(github)
git branch 							       //lists total no.of branches            git branch -v to see last commit of each branch
git checkout master 						//switched to master branch
git merge develop 						// merging develop branch into master branch nantar add kr commit kr
git branch --merge						//already merged branches
git branch --no-merge



MERGE CONFLICT
check if you are working with remote repo 		git remote -v



git push origin bugfix:mybugfix 				//pushing branch bugfix on github(remote) by named mybugfix



git stash 			//tu changes kela ani add . kela pn tula ata commit karaych nahi ani loose pn karaych nahi tr stash kar
git stash pop				//to bring them back to the staging area
git stash clear 	//stash also cleared 

git remote add origin urlherepastehere   		adding git repo url to project//remote means workingWithUrl and add is adding URL and origin is what is the url
git remote -v   	//shows repo url linked to this project
git push origin master 	//pushing the code to url so can see on repo and origin is your own account
git push upstream 		//cannot do this 


touch names.txt 	//creates new file
vi names.txt 		//opens the file where you can write

git commit -v 		//gives you the link of your repo
git branch vaibhav	//new branch created now do git checkout vaibhav


//////////////// WORKING WITH OTHERS REPO  /////////
1)go to their repo and fork. (create copy of their project in your own account)
2)git clone pasteURL
upstream url => from which url you are forking the project is upstream url     
git remote add origin upstream pasteURLHere

origin url is your own account
Watch 45:0:0
//Pull request => you forked their project and added to your as remote and you created and modified in some branch xyz now you are telling that hey i have fork your project and having branch xyz can you merge in your main branch
you cannot push to upstream url(because it's their's) so push to your's i.e origin (git push origin main)
go to your repo and click on compare and pull request

//create differenet branches to make different pullrequests becasue in one branch you can do only one pullrequest all other commits will go in queue


//IF YOU WANT TO DELETE YOUR COMMIT FROM their's project you need to first remove that commit in remote i.e(git reset pasteCommitId here) and get id from git urlhereFromgitLog
and then force push this (git push origin vai -f)  //vai is branch

//now your own forked project click on fetch upstream to see that main project accepted your pull request 	or do it manually
//you commited two commits in kunal branch and push on kunal so it got reflected on main branch on theirs project
//but your master branch doesnot have those commits 

git checkout main
git fetch --all --prune				//fetch all branches changes from their project that i have pushed prune means show all that are deleted also 
git reset --hard upstream/main 		//nmaking main branch of origin to main branch of upstream
git push origin MAIN 		//means push from local laptop folder to repo

//SHORTCUT TO ALL UPPER COMMANDS
git pull upstream main 				///any changes made in their project by us using other branch from our local branch will reflect in yours main
git push origin main



                          
//MERGE MULTIPLE COMMITS AT A TIME IN MAIN
1)copy the commit id bottommost 
git rebase -i pastebottomostcommitid  		-i means interactive environment
//above that id all are new ids taht we want to merge here you can change to pick or s(i.e squash) those who are squash will go into pick do esc:x find message


//MERGE CONFLICT
if you and someone is changing the same line then it will confuse which one to TRACked